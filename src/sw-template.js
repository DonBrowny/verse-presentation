if (typeof importScripts === 'function') {
  importScripts(
    'https://storage.googleapis.com/workbox-cdn/releases/6.5.3/workbox-sw.js'
  );
  /* global workbox */
  if (workbox) {
    console.log('Workbox is loaded');
    workbox.core.clientsClaim();

    // Precache all of the assets generated by your build process.
    // Their URLs are injected into the manifest variable below.
    // This variable must be present somewhere in your service worker file,
    // even if you decide not to use precaching. See https://cra.link/PWA
    workbox.precaching.precacheAndRoute(self.__WB_MANIFEST);

    // An example runtime caching route for requests that aren't handled by the
    // precache, in this case same-origin .png requests like those from in public/
    workbox.routing.registerRoute(
      // Add in any other file extensions or routing criteria as needed.
      ({ url }) =>
        url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
      new workbox.strategies.StaleWhileRevalidate({
        cacheName: 'images',
        plugins: [
          // Ensure that once this runtime cache reaches a maximum size the
          // least-recently used images are removed.
          new workbox.expiration.ExpirationPlugin({ maxEntries: 50 }),
        ],
      })
    );

    // This allows the web app to trigger skipWaiting via
    // registration.waiting.postMessage({type: 'SKIP_WAITING'})
    self.addEventListener('message', (event) => {
      if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
      }
    });

    // Any other custom service worker logic can go here.
  } else {
    // console.log('Workbox could not be loaded. No Offline support');
  }
}
